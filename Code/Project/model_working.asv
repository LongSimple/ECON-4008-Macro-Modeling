nuke;
beta=.1001;
rho = .859; 
sigma_e = .014; 
znum = 9; 
mu = 0; 
s = 2.575;
accuracy=10;
gamma=0.5;
maxholdings=1;
[stockstates, stockstatesmarkov] = tauchen(rho, sigma_e, znum, mu, s); 
numberofbonds=linspace(0,maxholdings,accuracy); %bond allocation number
numberofstocks=numberofbonds; %stock allocation number
sgrid=linspace(10,1,10); %stock going to be Piz for tauchen of stock
ugrid=numberofbonds-sgrid; %check
rb=1.04;
TV = zeros(length(numberofstocks),length(numberofstocks),length(stockstates));
V = TV;
G = TV; 
bondstates=transpose(rb*ones(znum,1));%riskfree rate 
precision = 1e-20;
distance = 2*precision;
iteration = 0;
while distance > precision
    
eV = zeros(length(numberofstocks),length(numberofstocks),length(stockstates)); %check this    
    for b = 1:length(numberofbonds)
        for s = 1:length(numberofstocks)
            for iz=1:length(stockstates)
                for jz=1:length(stockstates)
                    eV(s,b,iz) = eV(s,b,iz) + beta*(stockstatesmarkov(iz,jz)*V(b,s,jz));%look at this
                end
            end
        end
    end
    
    c=[];
    
for states = 1:length(stockstates)
        for sprime =1:length(numberofstocks)
            for bprime =1:length(numberofbonds)          
                    c(sprime,bprime,states)=((bondstates(states)*numberofbonds((accuracy/2)))+(stockstates(states)*numberofstocks(accuracy/2)))-((bondstates(states)*numberofbonds(bprime)+(stockstates(states)*numberofstocks(sprime))));
                   c=max(c,0);
            end %make s and b constatnt
        end
end

todaysvalue=[];
todaysvalue = (c.^(1-gamma)-1)/(1-gamma);

        for sprime =1:length(numberofstocks)
            for bprime =1:length(numberofbonds) 
                addthis(sprime,bprime,states)=beta*eV(sprime,bprime,states);
            end 
        end 
todaysvalue=todaysvalue+addthis;

test2=flip(todaysvalue,2);

for states=1:length(stockstates)
test3(:,states)=diag(test2(:,:,states),1);
test5(:,:,states)=diag(test3(:,states),1);
end

todaysvalue=flip(test5,2);
indexarray=[];

for states=1:length(stockstates)
    clear max 
    clear index
ctest=todaysvalue(:,:,states);
[max,index] = max(ctest(:));
indexarray(states)=index+((states-1)*(length(todaysvalue)^2));
end

    distance = abs(todaysvalue - V); 
    V=todaysvalue;
    iteration = iteration + 1;
    s = sprintf ( ' iteration %4d    ||TV-V|| = %8.6f ', iteration, distance);
    disp(s) 
end



% %     Tv0=zeros(length(bgrid),length(sgrid),length(zgrid));
% %     C0=Tv0;
% for b = 1:length(numberofbonds)
%     for s =1:length(numberofstocks)
%         for state =1:length(stockstates)
%             c=(bondstates(states)*numberofbonds(b))+(stockstates(stockstates)*numberofstocks(s))...
%            -(bondstates(states)*numberofbonds(b))-(stockstates(stockstates)*numberofstocks(s))
%         end
%     end
% end
% %    for i = 1:Knum
% %         for iz = 1:znum
% %             for j = 1:Knum
% %                 cVal =  zgrid(iz)*(Kgrid(i))^alpha + (1-d)*Kgrid(i) - Kgrid(j); 
% %                 c0(i,iz, j) = max(cVal, 0);
% %                 TV0(i,iz, j) = (c0(i,iz,j)^(1-sigma)-1)/(1-sigma) + beta*eV(j,iz);            
% %             end
% %         end
% % %    end
% %    for b = 1:length(bgrid)
% %        for s = 1:length(sgrid)
% %            for 
% %             test(b)= bgrid(b)(+sgrid(s)
% %            for bprime = 1:length(bgrid)
% %                test2(bprime) = bgrid(bprime)*RF;
% %                for sprime = 1:length(sgrid)
% %                    test3(sprime)=sgrid(sprime)
% %                    cVal= bgrid(b)+sgrid(i)-bgrid(j)-sgrid(j)
%    end
%     
%     
%     distance = max(max((abs(TV - V)))); 
%     
%     V = TV;
%     iteration = iteration + 1;
%     s = sprintf ( ' iteration %4d    ||TV-V|| = %8.6f ', iteration, distance);
%     disp(s)   
% end
